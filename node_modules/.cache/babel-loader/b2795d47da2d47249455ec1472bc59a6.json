{"ast":null,"code":"import * as React from 'react';\nimport { useRef } from 'react';\nvar SMOOTH_PTG = 14 / 15;\nexport default function useMobileTouchMove(listRef, callback) {\n  var touchedRef = useRef(false);\n  var touchYRef = useRef(0);\n  var elementRef = useRef(null); // Smooth scroll\n\n  var intervalRef = useRef(null);\n  var cleanUpEvents;\n\n  var onTouchMove = function onTouchMove(e) {\n    if (touchedRef.current) {\n      var currentY = Math.ceil(e.touches[0].pageY);\n      var offsetY = touchYRef.current - currentY;\n      console.log('>>>', offsetY);\n      touchYRef.current = currentY;\n      callback(offsetY); // Smooth interval\n\n      clearInterval(intervalRef.current);\n      intervalRef.current = setInterval(function () {\n        offsetY *= SMOOTH_PTG;\n        callback(offsetY);\n\n        if (Math.abs(offsetY) <= 0.1) {\n          clearInterval(intervalRef.current);\n        }\n      }, 16);\n    }\n  };\n\n  var onTouchEnd = function onTouchEnd() {\n    touchedRef.current = false;\n    cleanUpEvents();\n  };\n\n  var onTouchStart = function onTouchStart(e) {\n    cleanUpEvents();\n\n    if (e.touches.length === 1 && !touchedRef.current) {\n      touchedRef.current = true;\n      touchYRef.current = Math.ceil(e.touches[0].pageY);\n      e.preventDefault();\n      elementRef.current = e.target;\n      elementRef.current.addEventListener('touchmove', onTouchMove);\n      elementRef.current.addEventListener('touchend', onTouchEnd);\n    }\n  };\n\n  cleanUpEvents = function cleanUpEvents() {\n    if (elementRef.current) {\n      elementRef.current.removeEventListener('touchmove', onTouchMove);\n      elementRef.current.removeEventListener('touchend', onTouchEnd);\n    }\n  };\n\n  React.useEffect(function () {\n    listRef.current.addEventListener('touchstart', onTouchStart);\n    return function () {\n      listRef.current.removeEventListener('touchstart', onTouchStart);\n      cleanUpEvents();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n}","map":{"version":3,"sources":["/home/red/Developer/my-react-blog/node_modules/rc-virtual-list/es/hooks/useMobileTouchMove.js"],"names":["React","useRef","SMOOTH_PTG","useMobileTouchMove","listRef","callback","touchedRef","touchYRef","elementRef","intervalRef","cleanUpEvents","onTouchMove","e","current","currentY","Math","ceil","touches","pageY","offsetY","console","log","clearInterval","setInterval","abs","onTouchEnd","onTouchStart","length","preventDefault","target","addEventListener","removeEventListener","useEffect"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useRef } from 'react';\nvar SMOOTH_PTG = 14 / 15;\nexport default function useMobileTouchMove(listRef, callback) {\n  var touchedRef = useRef(false);\n  var touchYRef = useRef(0);\n  var elementRef = useRef(null); // Smooth scroll\n\n  var intervalRef = useRef(null);\n  var cleanUpEvents;\n\n  var onTouchMove = function onTouchMove(e) {\n    if (touchedRef.current) {\n      var currentY = Math.ceil(e.touches[0].pageY);\n      var offsetY = touchYRef.current - currentY;\n      console.log('>>>', offsetY);\n      touchYRef.current = currentY;\n      callback(offsetY); // Smooth interval\n\n      clearInterval(intervalRef.current);\n      intervalRef.current = setInterval(function () {\n        offsetY *= SMOOTH_PTG;\n        callback(offsetY);\n\n        if (Math.abs(offsetY) <= 0.1) {\n          clearInterval(intervalRef.current);\n        }\n      }, 16);\n    }\n  };\n\n  var onTouchEnd = function onTouchEnd() {\n    touchedRef.current = false;\n    cleanUpEvents();\n  };\n\n  var onTouchStart = function onTouchStart(e) {\n    cleanUpEvents();\n\n    if (e.touches.length === 1 && !touchedRef.current) {\n      touchedRef.current = true;\n      touchYRef.current = Math.ceil(e.touches[0].pageY);\n      e.preventDefault();\n      elementRef.current = e.target;\n      elementRef.current.addEventListener('touchmove', onTouchMove);\n      elementRef.current.addEventListener('touchend', onTouchEnd);\n    }\n  };\n\n  cleanUpEvents = function cleanUpEvents() {\n    if (elementRef.current) {\n      elementRef.current.removeEventListener('touchmove', onTouchMove);\n      elementRef.current.removeEventListener('touchend', onTouchEnd);\n    }\n  };\n\n  React.useEffect(function () {\n    listRef.current.addEventListener('touchstart', onTouchStart);\n    return function () {\n      listRef.current.removeEventListener('touchstart', onTouchStart);\n      cleanUpEvents();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n}"]},"metadata":{},"sourceType":"module"}